import sqlite3

def create_plate_db():
    conn = sqlite3.connect('database/plates.db')
    cursor = conn.cursor()
    
    # T·∫°o b·∫£ng valid_plates v·ªõi ƒë·∫ßy ƒë·ªß c·ªôt
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS valid_plates (
            plate TEXT PRIMARY KEY,
            name TEXT,
            company TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

def add_plate_to_db(plate, name, company):
    conn = sqlite3.connect('database/plates.db')
    cursor = conn.cursor()

    # Ch√®n bi·ªÉn s·ªë m·ªõi v√†o b·∫£ng
    cursor.execute("INSERT INTO valid_plates (plate, name, company) VALUES (?, ?, ?)", (plate, name, company))
    
    conn.commit()
    conn.close()

def delete_plate(plate):
    conn = sqlite3.connect('database/plates.db')
    cursor = conn.cursor()

    # X√≥a b·∫£n ghi c√≥ bi·ªÉn s·ªë kh·ªõp
    cursor.execute("DELETE FROM valid_plates WHERE plate = ?", (plate,))

    conn.commit()
    conn.close()
    print(f"‚úÖ ƒê√£ x√≥a bi·ªÉn s·ªë: {plate}")

def get_plate_info(plate):
    conn = sqlite3.connect('database/plates.db')
    cursor = conn.cursor()

    # L·∫•y th√¥ng tin ng∆∞·ªùi v√† c√¥ng ty t·ª´ bi·ªÉn s·ªë
    cursor.execute("SELECT name, company, plate FROM valid_plates WHERE plate = ?", (plate,))
    result = cursor.fetchone()

    conn.close()
    return result

def drop_table():
    # K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu
    conn = sqlite3.connect('database/plates.db')
    cursor = conn.cursor()
    
    # Xo√° b·∫£ng valid_plates n·∫øu n√≥ t·ªìn t·∫°i
    cursor.execute("DROP TABLE IF EXISTS valid_plates")
    
    # Commit v√† ƒë√≥ng k·∫øt n·ªëi
    conn.commit()
    conn.close()

def view_all_plates():
    conn = sqlite3.connect("database/plates.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM valid_plates")
    rows = cursor.fetchall()
    conn.close()

    print("üìã DANH S√ÅCH BI·ªÇN S·ªê TRONG DATABASE:")
    for row in rows:
        print(f"Bi·ªÉn s·ªë: {row[0]}, Ten: {row[1]}, Ten cong ty: {row[2]}")